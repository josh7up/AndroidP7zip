apply plugin: 'com.android.model.library'

model {
    android {
        compileSdkVersion rootProject.ext.configuration.compileSdk
        buildToolsVersion rootProject.ext.configuration.buildTools

        defaultConfig {
            minSdkVersion.apiLevel 15
            targetSdkVersion.apiLevel rootProject.ext.configuration.targetSdk
            versionCode 1
            versionName "1.0"
            testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
        }

        publishNonDefault true

        ndk {
            moduleName "p7zip"
            platformVersion 18
            CFlags.add('-I' + file("src/main/jni/p7zip/CPP"))
            CFlags.add('-I' + file("src/main/jni/p7zip/CPP/include_windows"))

            cppFlags.addAll([
                '-I' + file("src/main/jni"),
                '-I' + file("src/main/jni/p7zip/CPP"),
                '-I' + file("src/main/jni/p7zip/CPP/Common"),
                '-I' + file("src/main/jni/p7zip/CPP/include_windows"),
                '-I' + file("src/main/jni/p7zip/CPP/myWindows"),
                "-DANDROID_NDK",
                "-fexceptions",
                "-DNDEBUG",
                "-D_REENTRANT",
                "-DENV_UNIX",
                "-DBREAK_HANDLER",
                "-DUNICODE",
                "-D_UNICODE",
                "-DUNIX_USE_WIN_FILE",
                "-fPIC"
            ])

            cppFlags.add('-DNDK_DEBUG')

            ldLibs.addAll(["log"])
            stl "gnustl_static"
            //abiFilters.addAll(['armeabi'])
            abiFilters.addAll(['armeabi', 'armeabi-v7a', 'arm64-v8a', 'x86', 'x86_64'])

            println "In ndk block, cppFlags = ${cppFlags}"
        }
    }

    android.sources {
        main {
            jni {
                source {
                    // C and C++ source code
                    srcDirs += 'cpp'
                }
            }
        }
    }

    android.buildTypes {
        debug {
            debuggable true

//            ndk.with {
//                //cppFlags.add("-D_DEBUG")
//                cppFlags.add('-DNDK_DEBUG')
//
//                //abiFilters.add("armeabi-v7a")
//                //abiFilters.add("x86")
//                println "flags = $cppFlags"
//            }
        }
        release {
            minifyEnabled false
            proguardFiles.add(file('proguard-rules.pro'))

//            ndk.with {
//                abiFilters.add("armeabi-v7a")
//                abiFilters.add("x86")
//            }
        }
    }
}

dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])
}
